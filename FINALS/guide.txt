An inventory management system (IMS) is software for:
tracking inventory, 
controlling stock levels, 
handling orders, 
sales, 
returns, 
reports, 
and more. 
It helps automate the previously manual processes and increases efficiency, accuracy, and speed of operations.

C:\Users\Admin\Desktop\C++ demo


Menu 
1. customer
2. store
3. exit program

case 1(customer)
1. Buy 
2. Order/pre-order
3. cashier
4. back //end loop back to menu

  case 1 Buy 

  case 2 Order/pre-order

  case 3 Cashier

  case 4 Back



case 2(store)
1. add product 
{
   add product 
    category:
    1. 2. 3. 4. 5. 
    1. tshirt
      name: jhervin ex //array price[]
      size: s //array size[]
      price: 100 //array price[]
      stock: 10
    press any key to con... 
}
   



2. show inventory
    # Cat1       name   size   price stock
    1.T-shirt    item1  small  1     10
    2.T-shirt    item2  medium 2     20
    3.T-shirt    item3  large  3     30
      Cat2         
    4.Hooides    item1  small  1     10
    5.Hooides    item2  medium 2     20
    6.Hooides    item3  large  3     30
      Cat3         
    7.Shorts     item1  small  1     10
    8.Shorts     item2  medium 2     20
    9.Shorts     item3  large  3     30

3. product sales
4. restock
5. edit inventory
6. back //end loop back to menu

  customer buy output
          // if (i == 0) { 
        //     for (int j = 0; j < tops.size(); j++) {
        //         cout << "  " << tops[j] << endl;
        //     }
        //     cout << endl;
        // } else if (i == 1) { 
        //     for (int j = 0; j < bottoms.size(); j++) {
        //         cout << "  " << bottoms[j] << endl;
        //     } 
        //     cout << endl;

        // } else if (i == 2) { 
        //     for (int j = 0; j < accessories.size(); j++) {
        //         cout << "  " << accessories[j] << endl;
        //     }
        //     cout << endl;
        // }



        price
        stock dapat mabawasan

        choice = 1;
        priceLargeSizeTops[choice - 1] * qty = total
        stockLargeSizeTops[choice - 1]-=qty; 


        for(){
          if(choice1 == i){
            
          }
        }

        item    size        price             quantity           subTotal
        Polo    small       100              x3                  300
        Polo    small       100              x3                  300
        Polo    small       100              x3                  300

        total 900

        [1] pay (bawas stock)
        [2] cancel/empty basket (reverse engineering)
        [3] back

        *kapag mababa bawal
        *kapag enough na, bawas sa stock 



first 1
second //
third 2
foiurt 
fusu 







if (size3 == 1) { //for small
                    sizeStr = "N/A";
                    subTotal = (pr7[size3 -1] * quantity);
                    (st7[size3 -1] -= quantity); 
                    total += subTotal;
                    cout << t[choice3 -1] << " | " << "Small" << " | " << "Quantity: "<< quantity << " |" << " Price: " << subTotal <<endl;
                } 

            selectedItems.push_back(a[choice3 - 1]);
            selectedSizes.push_back(sizeStr);
            selectedQuantities.push_back(quantity);
            selectedPrices.push_back(subTotal);






            //NEW FOR RESTOCKS
vector<int> originalStockXSmallSizeTops = stockXSmallSizeTops;
vector<int> originalStockSmallSizeTops = stockSmallSizeTops;
vector<int> originalStockMediumSizeTops = stockMediumSizeTops;
vector<int> originalStockLargeSizeTops = stockLargeSizeTops;
vector<int> originalStockXLargeSizeTops = stockXLargeSizeTops;
vector<int> originalStockXXLargeSizeTops = stockXXLargeSizeTops;

vector<int> originalStockXSmallSizeBottoms = stockXSmallSizeBottoms;
vector<int> originalStockSmallSizeBottoms = stockSmallSizeBottoms;
vector<int> originalStockMediumSizeBottoms = stockMediumSizeBottoms;
vector<int> originalStockLargeSizeBottoms = stockLargeSizeBottoms;
vector<int> originalStockXLargeSizeBottoms = stockXLargeSizeBottoms;
vector<int> originalStockXXLargeSizeBottoms = stockXXLargeSizeBottoms;

vector<int> originalStockAccessories = stockAccessories;


void restoreStocks() { //FOR STOCK REASSIGNMENT

    stockXSmallSizeTops = originalStockXSmallSizeTops;
    stockSmallSizeTops = originalStockSmallSizeTops;
    stockMediumSizeTops = originalStockMediumSizeTops;
    stockLargeSizeTops = originalStockLargeSizeTops;
    stockXLargeSizeTops = originalStockXLargeSizeTops;
    stockXXLargeSizeTops = originalStockXXLargeSizeTops;

    stockXSmallSizeBottoms = originalStockXSmallSizeBottoms;
    stockSmallSizeBottoms = originalStockSmallSizeBottoms;
    stockMediumSizeBottoms = originalStockMediumSizeBottoms;
    stockLargeSizeBottoms = originalStockLargeSizeBottoms;
    stockXLargeSizeBottoms = originalStockXLargeSizeBottoms;
    stockXXLargeSizeBottoms = originalStockXXLargeSizeBottoms;

    stockAccessories = originalStockAccessories;



     if (selectedItems.empty() && isBought) {
    // if(isBought){
            cout << "Your basket is already empty!\n";
            cout <<isBought <<"if\n";
        } else {
          cout<< isBought<<"else\n";
            // Restore stock and empty the basket
            for (int i = 0; i < selectedItems.size(); i++) {
                string item = selectedItems[i];
                string size = selectedSizes[i];
                int quantity = selectedQuantities[i];

                // Restore stock for tops
                if (find(tops.begin(), tops.end(), item) != tops.end()) {
                    int index = find(tops.begin(), tops.end(), item) - tops.begin();
                    if (size == "XS") stockXSmallSizeTops[index] += quantity;
                    else if (size == "S") stockSmallSizeTops[index] += quantity;
                    else if (size == "M") stockMediumSizeTops[index] += quantity;
                    else if (size == "L") stockLargeSizeTops[index] += quantity;
                    else if (size == "XL") stockXLargeSizeTops[index] += quantity;
                    else if (size == "XXL") stockXXLargeSizeTops[index] += quantity;
                }

                // Restore stock for bottoms
                else if (find(bottoms.begin(), bottoms.end(), item) != bottoms.end()) {
                    int index = find(bottoms.begin(), bottoms.end(), item) - bottoms.begin();
                    if (size == "XS") stockXSmallSizeBottoms[index] += quantity;
                    else if (size == "S") stockSmallSizeBottoms[index] += quantity;
                    else if (size == "M") stockMediumSizeBottoms[index] += quantity;
                    else if (size == "L") stockLargeSizeBottoms[index] += quantity;
                    else if (size == "XL") stockXLargeSizeBottoms[index] += quantity;
                    else if (size == "XXL") stockXXLargeSizeBottoms[index] += quantity;
                }

                // Restore stock for accessories (no size check)
                else if (find(accessories.begin(), accessories.end(), item) != accessories.end()) {
                    int index = find(accessories.begin(), accessories.end(), item) - accessories.begin();
                    stockAccessories[index] += quantity;
                }
            }

            // Clear the basket
            subTotal = 0;
            total = 0;
            selectedItems.clear();
            selectedSizes.clear();
            selectedQuantities.clear();
            selectedPrices.clear();

            

            cout << "Your basket has been emptied and stock levels restored.\n";
        }
}